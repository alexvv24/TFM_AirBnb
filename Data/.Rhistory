# You can access the value of the widget with input$num, e.g.
output$value <- renderPrint({ input$num })
}
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "asdf",
label = "Recta roja",
min = 50,
max = 100,
value = 70)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
tableOutput(outputId = 'mitabla'),
print('Hola que ase, deja el whatsapp en clase'),
fluidPage(
# Copy the line below to make a number input box into the UI.
numericInput("num", label = h3("Numeric input"), value = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
)
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
abline(v = input$asdf,col='red')
})
output$mitabla <- renderTable({
head(iris)
function(input, output) {
# You can access the value of the widget with input$num, e.g.
output$value <- renderPrint({ input$num })
}
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "asdf",
label = "Recta roja",
min = 50,
max = 100,
value = 70)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
tableOutput(outputId = 'mitabla'),
print('Hola que ase, deja el whatsapp en clase'),
fluidPage(
# Copy the line below to make a number input box into the UI.
numericInput("num", label = h3("Numeric input"), value = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
)
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
abline(v = input$asdf,col='red')
})
output$mitabla <- renderTable({
head(iris),
function(input, output) {
# You can access the value of the widget with input$num, e.g.
output$value <- renderPrint({ input$num })
}
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for app that draws a histogram ----
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30),
sliderInput(inputId = "asdf",
label = "Recta roja",
min = 50,
max = 100,
value = 70)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
tableOutput(outputId = 'mitabla'),
print('Hola que ase, deja el whatsapp en clase'),
fluidPage(
# Copy the line below to make a number input box into the UI.
numericInput("num", label = h3("Numeric input"), value = 1),
hr(),
fluidRow(column(3, verbatimTextOutput("value")))
)
)
)
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
abline(v = input$asdf,col='red')
function(input, output) {
# You can access the value of the widget with input$num, e.g.
output$value <- renderPrint({ input$num })
}
})
output$mitabla <- renderTable({
head(iris)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
summary(🐥)
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
install.packages("rvest")
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
length(tmp)
sapply(tmp, class)
sapply(tmp, function(x) dim(html_table(x, fill = TRUE)))
ibex <- html_table(tmp[[5]])
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
length(tmp)
sapply(tmp, class)
sapply(tmp, function(x) dim(html_table(x, fill = TRUE)))
ibex <- html_table(tmp[[5]])
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
length(tmp)
sapply(tmp, class)
sapply(tmp, function(x) dim(html_table(x, fill = TRUE)))
ibex <- html_table(tmp[[5]])
#----------------------------------------
# Web scraping y manipulación básica de texto
#----------------------------------------
#----------------------------------------
## Web scraping
#----------------------------------------
library(rvest)
url.ibex <- "http://www.bolsamadrid.es/esp/aspx/Mercados/Precios.aspx?indice=ESI100000000"
tmp <- read_html(url.ibex)
tmp <- html_nodes(tmp, "table")
length(tmp)
sapply(tmp, class)
sapply(tmp, function(x) dim(html_table(x, fill = TRUE)))
ibex <- html_table(tmp[[5]])
# Inspecciona la tabla recién cargada. Presta atención al tipo de las columnas. ¿Observas
# algo raro?
# Dales nombres _razonables_ a las columnas de `ibex`. Nota: usa `colnames`.
# Examina la [documentación del paquete _rvest_](http://cran.r-project.org/web/packages/rvest/rvest.pdf)
# y busca aplicaciones a sus funciones.
#----------------------------------------
## Manipulación básica de texto
#----------------------------------------
gsub("h", "H", c("hola", "búho"))
gsub("^h", "H", c("hola", "búho"))
gsub("o$", "os", c("hola", "búho"))
grep("^h", c("hola", "búho"))
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
# * encuentra quellos cuyo nombre contenga un número (posiblemente tengas que investigar
# cómo se expresa _cualquier número_ como expresión regular)
# * encuentra aquellos que comiencen con `yellow`
# * encuentra aquellos que contengan `blue`
# * reemplaza los números por `x` (p.e., `blue10` quedaría como `bluexx`)
# * reemplaza secuencias de números por `x` (por ejemplo, `blue10` quedaría como `bluex`)
# Los números que aparecen en la tabla descargada en la sección anterior (y contenidos
# en `ibex`) no tienen formato numérico. Para convertirlos en números _de verdad_,
# transfórmalos adecuadamente:
# * Usa `gsub` para cambiar "." por "" (i.e., nada) en las columnas de interés. Ten
# en cuenta que `.` es el comodín de las expresiones regulares; el punto es `\\.`.
# * Usa `gsub` para cambiar `,` por `.` en las columnas de interés.
# * Finalmente, usa `as.numeric` para cambiar texto resultante por valores numéricos.
# * ¿Te atreves a usar `as.Date` para cambiar texto por fechas donde proceda?
paste("A", 1:6, sep = ",")
paste("Hoy es ", date(), " y tengo clase de R", sep = "")
paste("A", 1:6, collapse = ",")
paste("A", 1:6, sep = "_", collapse = ",")
strsplit("Hoy es martes", split = " ")
strsplit(c("hoy es martes", "mañana es miércoles"), split = " ")
# Crea una función que tome los nombres de ficheros
# `ficheros <- c("ventas_20160522_zaragoza.csv",
#                "pedidos_firmes_20160422_soria.csv")`
# y genere una tabla con una fila por fichero y tres columnas: el nombre del fichero,
# la fecha y y la provincia. Nota: puedes crear una función que procese solo un nombre
# de fichero y aplicársela _convenientemente_ al vector de nombres.
#----------------------------------------
## JSON y XML
#----------------------------------------
library(rjson)
pob <- readLines("http://servicios.ine.es/wstempus/js/ES/DATOS_TABLA/2852?nult=5&tip=AM")
pob <- paste(pob, collapse = " ")
pob <- fromJSON(pob)
class(pob)
pob[[89]]$Data[[5]]$Valor
pob[[89]]$Nombre
library(xml2)
bm  <- read_xml("http://api.worldbank.org/countries/all/indicators/NY.GDP.MKTP.CD?date=2009:2010&per_page=500&page=1")
esp <- xml_find_all(bm, "//*/wb:data[wb:country[@id='ES']]/wb:value")
as.numeric(xml_text(esp))
#----------------------------------------
## Resumen y referencias
#----------------------------------------
#----------------------------------------
## Ejercicios adicionales
#----------------------------------------
# Toma el vector `c("41°39'00''N","0°53'00''O")` y conviértelo en _coordenadas decimales_.
# Recuerda que también tienes que asignar el signo (es menos para latitudes en el hemisferio
# sur y al oeste del meridiano de Greenwich).
# Inspecciona la tabla recién cargada. Presta atención al tipo de las columnas. ¿Observas
# algo raro?
dim(ibex)
head(ibex)
summary(ibex)
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('[0-9]*,colors()')
?grep
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('*[0-9],colors()')
colors()
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('.*[0-9],colors()')
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('.*[0-9],colors()')
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('^.*[0-9],colors()')
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('.*[0-9],colors()$')
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('.*entra quellos cuyo nombre contenga un número (posiblemente tengas que investigar
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('[0-9],colors()')
# `colors()` es una función que devuelve el nombre de más de 600 colores en R. Usándolo,
grep('[0-9]',colors())
grep('[0-9]',colors())
# * encuentra aquellos que comiencen con `yellow`
grep('^yellow',colors())
# * encuentra aquellos que contengan `blue`
grep('^blue',colors())
# * encuentra aquellos que contengan `blue`
grep('blue',colors())
grep('blue|yellow',colors())
# * reemplaza los números por `x` (p.e., `blue10` quedaría como `bluexx`)
gsub('[0-9]','hola',colors())
head(ibex)
# * reemplaza secuencias de números por `x` (por ejemplo, `blue10` quedaría como `bluex`)
colnames(ibex)[c(2,3,4,5,6)] <- c('ultimo','diff','max','min','volumen')
head(ibex)
ibex$diff <- as.numeric(gsub(',','.',ibex$diff))
ibex(head)
head(ibex)
gsub('\\.','',ibex$volumen)
ibex$volumen <- gsub('\\.','',ibex$volumen)
head(ibex)
head(ibex)
ibex$volumen <- as.numeric(gsub('\\.','',ibex$volumen))
head(ibex)
# y genere una tabla con una fila por fichero y tres columnas: el nombre del fichero,
# la fecha y y la provincia. Nota: puedes crear una función que procese solo un nombre
# de fichero y aplicársela _convenientemente_ al vector de nombres.
texto <- readLines('http://www.gutenberg.org/cache/epub/2000/pg2000.txt',encoding = 'UTF-8')
head(texto)
?grep
head(texto,10)
head(texto,20)
head(texto,40)
head(texto,36)
texto2 <- texto[-head(texto,36)]
texto2 <- texto[-c(0:36)]
head(texto2)#----------------------------------------
texto <- readLines('http://www.gutenberg.org/cache/epub/2000/pg2000.txt',encoding = 'UTF-8')
tmp <- texto[-c(0:36)]
head(tmp)
tail(tmp)
tail(tmp,25)
texto <- readLines('http://www.gutenberg.org/cache/epub/2000/pg2000.txt',encoding = 'UTF-8')
tmp <- texto[-c(0:36)]
tmp <- paste(texto,collapse = ' ')
tmp <- gsub(' +',' ',tmp)
tmp <- gsub(',|-','',tmp)
tmp <- strsplit(tmp,' ')
tmp <- tmp[[1]]
tmp <- tolower(tmp)
tail(sort(table(tmp)),100)
grep('w',tmp)
length(table(tmp))
library(rjson)
pob <- readLines("http://servicios.ine.es/wstempus/js/ES/DATOS_TABLA/2852?nult=5&tip=AM")
pob <- paste(pob, collapse = " ")
pob <- fromJSON(pob)
class(pob)
pob[[89]]$Data[[5]]$Valor
pob[[89]]$Nombre
library(rjson)
pob <- readLines("http://servicios.ine.es/wstempus/js/ES/DATOS_TABLA/2852?nult=5&tip=AM")
pob <- paste(pob, collapse = " ")
pob <- fromJSON(pob)
?read.table
plot(cars$speed, cars$dist)
abline(a = -17,b = 4, col= 'red')
abline(v=10, col ='hotpink')
plot(cars$dist, main = "Distancias de...",
ylab = "distancia en pies")
lines(cars$dist)
grid()
curve(pnorm(x, 0, 2), -8, 8)
curve(dnorm(x, 0, 2), -8, 8)
abline(v = qnorm(0.1, 0, 2), col = "red")
interes.mensual <- 3 / 12 / 100
meses <- 1:(12*30)
deflactor <- (1 + interes.mensual)^meses    # un vector
deflactor <- 1 / deflactor                  # otro vector
valor.actual <- sum(500 * deflactor)
capital <- 100000
anyos <- 20
interes <- 3
interes.mensual <- interes / 12 / 100
meses <- 1:(anyos*12)
cuota <- capital / sum(1 / (1+interes.mensual)^meses)
cuota
boxplot(sleep$extra ~ sleep$group, col = "gray",
main = "Diferencias por grupo")
=lm
?lm
?is.list
#----------------------------------------
# Paquetes, rmarkdown y shiny
#----------------------------------------
#----------------------------------------
## Paquetes
#----------------------------------------
install.packages("shiny")
library(shiny)
# Encuentra un paquete de R para acceder a datos de Google Analytics e instálalo. Nota:
# existen varios.
# Si tienes una cuenta en Google Analytics, sigue [estas instrucciones](https://www.datanalytics.com/2016/06/06/acceso-a-google-analytcs-desde-r/)
# para descargar datos de ese servicio y procesar los datos obtenidos.
#----------------------------------------
## Rmarkdown
#----------------------------------------
# Crea un fichero `.Rmd` usando `File > New File > R Markdown`.
# Aprende markdown modificando el fichero de ejemplo creado en el ejercicio anterior
# añadiéndole títulos de varios niveles, párrafos de texto, cursivas, negritas, enlaces,
# listas (numeradas y sin numerar), etc. usando como guía  el tutorial [`http://daringfireball.net/projects/markdown/syntax`](http://daringfireball.net/projects/markdown/syntax).
# Recuerda _compilar_ el documento (p.e., pulsando el botón con la etiqueta _Knit HTML_
# situado encima del panel de edición de RStudio) para inspeccionar el resultado final.
# Crea sobre tu documento (o sobre una nueva plantilla) nuevos bloques de código que
# hagan alguna cosa.
# Los bloques de código incluyen opciones en su encabezamiento (p.e., para que un bloque
# se ejecute o no; para que el código se muestre o se oculte en el documento final,
# etc.). Consulta las opciones (y el tipo de opciones) disponibles en [`http://yihui.name/knitr/options/`](http://yihui.name/knitr/options/).
#----------------------------------------
## Shiny
#----------------------------------------
library(shiny)
runExample(example = "01_hello")
?paste
paste("A", 1:6, sep = ",")
paste("Hoy es ", date(), " y tengo clase de R", sep = "")
paste("A", 1:6, collapse = ",")
paste("A", 1:6, sep = ",")
paste("Hoy es ", date(), " y tengo clase de R", sep = "")
paste("A", 1:6, collapse = ",")
paste("A", 1:6, sep = ",")
paste("Hoy es ", date(), " y tengo clase de R", sep = "")
paste("A", 1:6, collapse = ",")
paste("A", 1:6, sep = "_", collapse = ",")
strsplit("Hoy es martes", split = " ")
strsplit(c("hoy es martes", "mañana es miércoles"), split = " ")
mi.iris <- iris[order(iris$Petal.Length),]
head(mi.iris)
hist(iris$Sepal.Width)
hist(iris$Sepal.Width, main = "iris: histograma de la anchura de los sépalos",
xlab = "anchura del sépalo", ylab = "frecuencia",
col = "steelblue")
barplot(table(iris$Species))
barplot(VADeaths[, 2], xlab = "tramos de edad", ylab = "tasa de mortalidad",
main = "Tasa de mortalidad en Virginia\nmujer/rural")
plot(cars$speed, cars$dist)
plot(airquality$Temp, type = "l")
abline(h = mean(airquality$Temp), col = "red")
plot(airquality$Temp)
lines(airquality$Temp)
abline(h = mean(airquality$Temp), col = "red")
plot(airquality$Temp)
lines(airquality$Temp)
abline(h = mean(airquality$Temp), col = "red")
boxplot(iris$Sepal.Width ~ iris$Species, col = "gray",
main = "Especies de iris\nsegún la anchura del sépalo")
install.packages("tidyquant")
library(tidyquant)
apple <- tq_get("AAPL", get = "stock.prices",
from = "2007-01-03", to = "2017-06-05")
apple <- tq_get("AAPL", get = "stock.prices",
from = "2007-01-03", to = "2019-03-15")
head(apple)
plot(apple$date, apple$adjusted, type = "l")
bond1 <- c(0.6,3.6,6.6,3.7,-0.9,7.9,0.4,1.9)
mean(bond1)
names(bond1) <- c("2009","2010","2011","2012","2013","2014","2015","2016")
bond1
df_ene <- read.csv("Lisboa/listings0.csv.gz", stringsAsFactors = F)
df_ene <- read.csv("Lisboa/listings0.csv.gz", stringsAsFactors = F)
setwd("~/OneDrive/MASTER EAE BIG DATA_ANALYTICS/GitHub/TFM_AirBnb/Data")
df_ene <- read.csv("Lisboa/listings0.csv.gz", stringsAsFactors = F)
head(df_ene,1)
dim(df_ene)
names(df_ene)
str(df_ene)
summary(df_ene)
library(dplyr)
glimpse(df_ene)
